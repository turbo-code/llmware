# Workflow to build (and eventually test) wheels.

name: Build Wheels

on:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheel for macosx-arm64
    runs-on: macos-latest

    strategy:
      fail-fast: false
      
    steps:
      # Checkout the native code
      - name: Checkout native code
        uses: actions/checkout@v3
    
      # Setup Python 3.9
      - name: Setup Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      # Install native dependencies
      - name: Install native dependencies
        run: |
          brew install -y mongo-c-driver libpng libzip libtiff zlib tesseract poppler
          brewPackages = $(brew list)
          echo "$brewPackages"

      # - name: Build wheels
      #   uses: pypa/cibuildwheel@v2.15.0
      #   env:
      #     CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}*
      #     CIBW_ARCHS: ${{ matrix.buildplat[2] }}
      #     CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
      #     CIBW_PRERELEASE_PYTHONS: True

      #     # TODO remove the CIBW_BEFORE_BUILD_* lines once there are
      #     #  numpy2.0 wheels available on PyPI. Also remove/comment out the
      #     # PIP_NO_BUILD_ISOLATION and PIP_EXTRA_INDEX_URL from CIBW_ENVIRONMENT
      #     # (also for _MACOS and _WINDOWS below)
      #     CIBW_BEFORE_BUILD_LINUX: "pip install numpy>=2.0.0.dev0 meson-python cython pythran pybind11 ninja; bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"
      #     CIBW_BEFORE_BUILD_WINDOWS: "pip install numpy>=2.0.0.dev0 meson-python cython pythran pybind11 ninja && bash {project}/tools/wheels/cibw_before_build_win.sh {project}"
      #     CIBW_BEFORE_BUILD_MACOS: "pip install numpy>=2.0.0.dev0 meson-python cython pythran pybind11 ninja; bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"
      #     # Allow pip to find install nightly wheels if necessary
      #     # Setting PIP_NO_BUILD_ISOLATION=false makes pip use build-isolation.
      #     CIBW_ENVIRONMENT: "PIP_NO_BUILD_ISOLATION=false PIP_PRE=1 PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple"

      #     CIBW_ENVIRONMENT_WINDOWS: >
      #       PKG_CONFIG_PATH=c:/opt/64/lib/pkgconfig
      #       PIP_PRE=1
      #       PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
      #       PIP_NO_BUILD_ISOLATION=false

      #     # setting SDKROOT necessary when using the gfortran compiler
      #     # installed in cibw_before_build_macos.sh
      #     # MACOS_DEPLOYMENT_TARGET is set because of
      #     # https://github.com/mesonbuild/meson-python/pull/309. Once
      #     # an update is released, then that environment variable can
      #     # be removed.
      #     CIBW_ENVIRONMENT_MACOS: >
      #       SDKROOT=/Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
      #       LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
      #       MACOSX_DEPLOYMENT_TARGET=10.9
      #       MACOS_DEPLOYMENT_TARGET=10.9
      #       _PYTHON_HOST_PLATFORM=macosx-10.9-x86_64
      #       PIP_PRE=1
      #       PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
      #       PIP_NO_BUILD_ISOLATION=false

      #     CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
      #       DYLD_LIBRARY_PATH=/usr/local/lib delocate-listdeps {wheel} &&
      #       DYLD_LIBRARY_PATH=/usr/local/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}

      # - uses: actions/upload-artifact@v3
      #   with:
      #     path: ./wheelhouse/*.whl
      #     name: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}

      # - uses: conda-incubator/setup-miniconda@v2
      #   with:
      #     # for installation of anaconda-client, required for upload to
      #     # anaconda.org
      #     # default (and activated) environment name is test
      #     # Note that this step is *after* specific pythons have been used to
      #     # build and test the wheel
      #     auto-update-conda: true
      #     python-version: "3.10"

      # - name: Upload wheels
      #   if: success()
      #   shell: bash -el {0}
      #   # see https://github.com/marketplace/actions/setup-miniconda for why
      #   # `-el {0}` is required.
      #   env:
      #     SCIPY_STAGING_UPLOAD_TOKEN: ${{ secrets.SCIPY_STAGING_UPLOAD_TOKEN }}
      #     SCIPY_NIGHTLY_UPLOAD_TOKEN: ${{ secrets.SCIPY_NIGHTLY_UPLOAD_TOKEN }}
      #   run: |
      #     conda install -y anaconda-client
      #     source tools/wheels/upload_wheels.sh
      #     set_upload_vars
      #     # For cron jobs (restricted to main branch) or "Run workflow" trigger
      #     # an upload to:
      #     #
      #     # https://anaconda.org/scientific-python-nightly-wheels/scipy
      #     # 
      #     # Pushes to a maintenance branch that contain '[wheel build]' will
      #     # cause wheels to be built and uploaded to:
      #     #
      #     # https://anaconda.org/multibuild-wheels-staging/scipy
      #     #
      #     # The tokens were originally generated at anaconda.org
      #     upload_wheels
